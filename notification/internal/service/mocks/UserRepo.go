// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/SergeyBogomolovv/profile-manager/notification/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: ctx, userID
func (_m *UserRepo) GetByID(ctx context.Context, userID string) (domain.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type UserRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserRepo_Expecter) GetByID(ctx interface{}, userID interface{}) *UserRepo_GetByID_Call {
	return &UserRepo_GetByID_Call{Call: _e.mock.On("GetByID", ctx, userID)}
}

func (_c *UserRepo_GetByID_Call) Run(run func(ctx context.Context, userID string)) *UserRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_GetByID_Call) Return(_a0 domain.User, _a1 error) *UserRepo_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_GetByID_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *UserRepo_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// IsExists provides a mock function with given fields: ctx, userID
func (_m *UserRepo) IsExists(ctx context.Context, userID string) (bool, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_IsExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExists'
type UserRepo_IsExists_Call struct {
	*mock.Call
}

// IsExists is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserRepo_Expecter) IsExists(ctx interface{}, userID interface{}) *UserRepo_IsExists_Call {
	return &UserRepo_IsExists_Call{Call: _e.mock.On("IsExists", ctx, userID)}
}

func (_c *UserRepo_IsExists_Call) Run(run func(ctx context.Context, userID string)) *UserRepo_IsExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_IsExists_Call) Return(_a0 bool, _a1 error) *UserRepo_IsExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_IsExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *UserRepo_IsExists_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, user
func (_m *UserRepo) Save(ctx context.Context, user domain.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type UserRepo_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - user domain.User
func (_e *UserRepo_Expecter) Save(ctx interface{}, user interface{}) *UserRepo_Save_Call {
	return &UserRepo_Save_Call{Call: _e.mock.On("Save", ctx, user)}
}

func (_c *UserRepo_Save_Call) Run(run func(ctx context.Context, user domain.User)) *UserRepo_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *UserRepo_Save_Call) Return(_a0 error) *UserRepo_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_Save_Call) RunAndReturn(run func(context.Context, domain.User) error) *UserRepo_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, user
func (_m *UserRepo) Update(ctx context.Context, user domain.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user domain.User
func (_e *UserRepo_Expecter) Update(ctx interface{}, user interface{}) *UserRepo_Update_Call {
	return &UserRepo_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *UserRepo_Update_Call) Run(run func(ctx context.Context, user domain.User)) *UserRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *UserRepo_Update_Call) Return(_a0 error) *UserRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_Update_Call) RunAndReturn(run func(context.Context, domain.User) error) *UserRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
