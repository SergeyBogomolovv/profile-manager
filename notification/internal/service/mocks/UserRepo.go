// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/SergeyBogomolovv/profile-manager/notification/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// SaveSubscription provides a mock function with given fields: ctx, userID, subType
func (_m *UserRepo) SaveSubscription(ctx context.Context, userID string, subType domain.SubscriptionType) error {
	ret := _m.Called(ctx, userID, subType)

	if len(ret) == 0 {
		panic("no return value specified for SaveSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.SubscriptionType) error); ok {
		r0 = rf(ctx, userID, subType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_SaveSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSubscription'
type UserRepo_SaveSubscription_Call struct {
	*mock.Call
}

// SaveSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - subType domain.SubscriptionType
func (_e *UserRepo_Expecter) SaveSubscription(ctx interface{}, userID interface{}, subType interface{}) *UserRepo_SaveSubscription_Call {
	return &UserRepo_SaveSubscription_Call{Call: _e.mock.On("SaveSubscription", ctx, userID, subType)}
}

func (_c *UserRepo_SaveSubscription_Call) Run(run func(ctx context.Context, userID string, subType domain.SubscriptionType)) *UserRepo_SaveSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.SubscriptionType))
	})
	return _c
}

func (_c *UserRepo_SaveSubscription_Call) Return(_a0 error) *UserRepo_SaveSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_SaveSubscription_Call) RunAndReturn(run func(context.Context, string, domain.SubscriptionType) error) *UserRepo_SaveSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUser provides a mock function with given fields: ctx, user
func (_m *UserRepo) SaveUser(ctx context.Context, user domain.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type UserRepo_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user domain.User
func (_e *UserRepo_Expecter) SaveUser(ctx interface{}, user interface{}) *UserRepo_SaveUser_Call {
	return &UserRepo_SaveUser_Call{Call: _e.mock.On("SaveUser", ctx, user)}
}

func (_c *UserRepo_SaveUser_Call) Run(run func(ctx context.Context, user domain.User)) *UserRepo_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *UserRepo_SaveUser_Call) Return(_a0 error) *UserRepo_SaveUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_SaveUser_Call) RunAndReturn(run func(context.Context, domain.User) error) *UserRepo_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// Subscriptions provides a mock function with given fields: ctx, userID
func (_m *UserRepo) Subscriptions(ctx context.Context, userID string) ([]domain.Subscription, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Subscriptions")
	}

	var r0 []domain.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.Subscription, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Subscription); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_Subscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscriptions'
type UserRepo_Subscriptions_Call struct {
	*mock.Call
}

// Subscriptions is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserRepo_Expecter) Subscriptions(ctx interface{}, userID interface{}) *UserRepo_Subscriptions_Call {
	return &UserRepo_Subscriptions_Call{Call: _e.mock.On("Subscriptions", ctx, userID)}
}

func (_c *UserRepo_Subscriptions_Call) Run(run func(ctx context.Context, userID string)) *UserRepo_Subscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_Subscriptions_Call) Return(_a0 []domain.Subscription, _a1 error) *UserRepo_Subscriptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_Subscriptions_Call) RunAndReturn(run func(context.Context, string) ([]domain.Subscription, error)) *UserRepo_Subscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
