// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/SergeyBogomolovv/profile-manager/notification/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// SubscriptionRepo is an autogenerated mock type for the SubscriptionRepo type
type SubscriptionRepo struct {
	mock.Mock
}

type SubscriptionRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *SubscriptionRepo) EXPECT() *SubscriptionRepo_Expecter {
	return &SubscriptionRepo_Expecter{mock: &_m.Mock}
}

// IsExists provides a mock function with given fields: ctx, userID, subType
func (_m *SubscriptionRepo) IsExists(ctx context.Context, userID string, subType domain.SubscriptionType) (bool, error) {
	ret := _m.Called(ctx, userID, subType)

	if len(ret) == 0 {
		panic("no return value specified for IsExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.SubscriptionType) (bool, error)); ok {
		return rf(ctx, userID, subType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.SubscriptionType) bool); ok {
		r0 = rf(ctx, userID, subType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.SubscriptionType) error); ok {
		r1 = rf(ctx, userID, subType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriptionRepo_IsExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExists'
type SubscriptionRepo_IsExists_Call struct {
	*mock.Call
}

// IsExists is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - subType domain.SubscriptionType
func (_e *SubscriptionRepo_Expecter) IsExists(ctx interface{}, userID interface{}, subType interface{}) *SubscriptionRepo_IsExists_Call {
	return &SubscriptionRepo_IsExists_Call{Call: _e.mock.On("IsExists", ctx, userID, subType)}
}

func (_c *SubscriptionRepo_IsExists_Call) Run(run func(ctx context.Context, userID string, subType domain.SubscriptionType)) *SubscriptionRepo_IsExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.SubscriptionType))
	})
	return _c
}

func (_c *SubscriptionRepo_IsExists_Call) Return(_a0 bool, _a1 error) *SubscriptionRepo_IsExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriptionRepo_IsExists_Call) RunAndReturn(run func(context.Context, string, domain.SubscriptionType) (bool, error)) *SubscriptionRepo_IsExists_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, userID, subType
func (_m *SubscriptionRepo) Save(ctx context.Context, userID string, subType domain.SubscriptionType) error {
	ret := _m.Called(ctx, userID, subType)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.SubscriptionType) error); ok {
		r0 = rf(ctx, userID, subType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscriptionRepo_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type SubscriptionRepo_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - subType domain.SubscriptionType
func (_e *SubscriptionRepo_Expecter) Save(ctx interface{}, userID interface{}, subType interface{}) *SubscriptionRepo_Save_Call {
	return &SubscriptionRepo_Save_Call{Call: _e.mock.On("Save", ctx, userID, subType)}
}

func (_c *SubscriptionRepo_Save_Call) Run(run func(ctx context.Context, userID string, subType domain.SubscriptionType)) *SubscriptionRepo_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.SubscriptionType))
	})
	return _c
}

func (_c *SubscriptionRepo_Save_Call) Return(_a0 error) *SubscriptionRepo_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SubscriptionRepo_Save_Call) RunAndReturn(run func(context.Context, string, domain.SubscriptionType) error) *SubscriptionRepo_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SubscriptionsByUser provides a mock function with given fields: ctx, userID
func (_m *SubscriptionRepo) SubscriptionsByUser(ctx context.Context, userID string) ([]domain.Subscription, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for SubscriptionsByUser")
	}

	var r0 []domain.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.Subscription, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Subscription); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriptionRepo_SubscriptionsByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscriptionsByUser'
type SubscriptionRepo_SubscriptionsByUser_Call struct {
	*mock.Call
}

// SubscriptionsByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *SubscriptionRepo_Expecter) SubscriptionsByUser(ctx interface{}, userID interface{}) *SubscriptionRepo_SubscriptionsByUser_Call {
	return &SubscriptionRepo_SubscriptionsByUser_Call{Call: _e.mock.On("SubscriptionsByUser", ctx, userID)}
}

func (_c *SubscriptionRepo_SubscriptionsByUser_Call) Run(run func(ctx context.Context, userID string)) *SubscriptionRepo_SubscriptionsByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SubscriptionRepo_SubscriptionsByUser_Call) Return(_a0 []domain.Subscription, _a1 error) *SubscriptionRepo_SubscriptionsByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriptionRepo_SubscriptionsByUser_Call) RunAndReturn(run func(context.Context, string) ([]domain.Subscription, error)) *SubscriptionRepo_SubscriptionsByUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewSubscriptionRepo creates a new instance of SubscriptionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionRepo {
	mock := &SubscriptionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
