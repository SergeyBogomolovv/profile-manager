// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "github.com/SergeyBogomolovv/profile-manager/notification/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// Sender is an autogenerated mock type for the Sender type
type Sender struct {
	mock.Mock
}

type Sender_Expecter struct {
	mock *mock.Mock
}

func (_m *Sender) EXPECT() *Sender_Expecter {
	return &Sender_Expecter{mock: &_m.Mock}
}

// SendLoginNotification provides a mock function with given fields: telegramID, data
func (_m *Sender) SendLoginNotification(telegramID int64, data domain.LoginNotification) error {
	ret := _m.Called(telegramID, data)

	if len(ret) == 0 {
		panic("no return value specified for SendLoginNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, domain.LoginNotification) error); ok {
		r0 = rf(telegramID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Sender_SendLoginNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendLoginNotification'
type Sender_SendLoginNotification_Call struct {
	*mock.Call
}

// SendLoginNotification is a helper method to define mock.On call
//   - telegramID int64
//   - data domain.LoginNotification
func (_e *Sender_Expecter) SendLoginNotification(telegramID interface{}, data interface{}) *Sender_SendLoginNotification_Call {
	return &Sender_SendLoginNotification_Call{Call: _e.mock.On("SendLoginNotification", telegramID, data)}
}

func (_c *Sender_SendLoginNotification_Call) Run(run func(telegramID int64, data domain.LoginNotification)) *Sender_SendLoginNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(domain.LoginNotification))
	})
	return _c
}

func (_c *Sender_SendLoginNotification_Call) Return(_a0 error) *Sender_SendLoginNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Sender_SendLoginNotification_Call) RunAndReturn(run func(int64, domain.LoginNotification) error) *Sender_SendLoginNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewSender creates a new instance of Sender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sender {
	mock := &Sender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
