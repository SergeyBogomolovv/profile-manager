// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/SergeyBogomolovv/profile-manager/notification/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Mailer is an autogenerated mock type for the Mailer type
type Mailer struct {
	mock.Mock
}

type Mailer_Expecter struct {
	mock *mock.Mock
}

func (_m *Mailer) EXPECT() *Mailer_Expecter {
	return &Mailer_Expecter{mock: &_m.Mock}
}

// SendLoginEmail provides a mock function with given fields: to, data
func (_m *Mailer) SendLoginEmail(to string, data domain.LoginNotification) error {
	ret := _m.Called(to, data)

	if len(ret) == 0 {
		panic("no return value specified for SendLoginEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, domain.LoginNotification) error); ok {
		r0 = rf(to, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mailer_SendLoginEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendLoginEmail'
type Mailer_SendLoginEmail_Call struct {
	*mock.Call
}

// SendLoginEmail is a helper method to define mock.On call
//   - to string
//   - data domain.LoginNotification
func (_e *Mailer_Expecter) SendLoginEmail(to interface{}, data interface{}) *Mailer_SendLoginEmail_Call {
	return &Mailer_SendLoginEmail_Call{Call: _e.mock.On("SendLoginEmail", to, data)}
}

func (_c *Mailer_SendLoginEmail_Call) Run(run func(to string, data domain.LoginNotification)) *Mailer_SendLoginEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(domain.LoginNotification))
	})
	return _c
}

func (_c *Mailer_SendLoginEmail_Call) Return(_a0 error) *Mailer_SendLoginEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mailer_SendLoginEmail_Call) RunAndReturn(run func(string, domain.LoginNotification) error) *Mailer_SendLoginEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendRegisterEmail provides a mock function with given fields: to
func (_m *Mailer) SendRegisterEmail(to string) error {
	ret := _m.Called(to)

	if len(ret) == 0 {
		panic("no return value specified for SendRegisterEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mailer_SendRegisterEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRegisterEmail'
type Mailer_SendRegisterEmail_Call struct {
	*mock.Call
}

// SendRegisterEmail is a helper method to define mock.On call
//   - to string
func (_e *Mailer_Expecter) SendRegisterEmail(to interface{}) *Mailer_SendRegisterEmail_Call {
	return &Mailer_SendRegisterEmail_Call{Call: _e.mock.On("SendRegisterEmail", to)}
}

func (_c *Mailer_SendRegisterEmail_Call) Run(run func(to string)) *Mailer_SendRegisterEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Mailer_SendRegisterEmail_Call) Return(_a0 error) *Mailer_SendRegisterEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mailer_SendRegisterEmail_Call) RunAndReturn(run func(string) error) *Mailer_SendRegisterEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMailer creates a new instance of Mailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mailer {
	mock := &Mailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
