// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ImageRepo is an autogenerated mock type for the ImageRepo type
type ImageRepo struct {
	mock.Mock
}

type ImageRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ImageRepo) EXPECT() *ImageRepo_Expecter {
	return &ImageRepo_Expecter{mock: &_m.Mock}
}

// DeleteAvatar provides a mock function with given fields: ctx, url
func (_m *ImageRepo) DeleteAvatar(ctx context.Context, url string) error {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAvatar")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImageRepo_DeleteAvatar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAvatar'
type ImageRepo_DeleteAvatar_Call struct {
	*mock.Call
}

// DeleteAvatar is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
func (_e *ImageRepo_Expecter) DeleteAvatar(ctx interface{}, url interface{}) *ImageRepo_DeleteAvatar_Call {
	return &ImageRepo_DeleteAvatar_Call{Call: _e.mock.On("DeleteAvatar", ctx, url)}
}

func (_c *ImageRepo_DeleteAvatar_Call) Run(run func(ctx context.Context, url string)) *ImageRepo_DeleteAvatar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ImageRepo_DeleteAvatar_Call) Return(_a0 error) *ImageRepo_DeleteAvatar_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImageRepo_DeleteAvatar_Call) RunAndReturn(run func(context.Context, string) error) *ImageRepo_DeleteAvatar_Call {
	_c.Call.Return(run)
	return _c
}

// UploadAvatar provides a mock function with given fields: ctx, userID, body
func (_m *ImageRepo) UploadAvatar(ctx context.Context, userID string, body []byte) (string, error) {
	ret := _m.Called(ctx, userID, body)

	if len(ret) == 0 {
		panic("no return value specified for UploadAvatar")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (string, error)); ok {
		return rf(ctx, userID, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) string); ok {
		r0 = rf(ctx, userID, body)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, userID, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImageRepo_UploadAvatar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadAvatar'
type ImageRepo_UploadAvatar_Call struct {
	*mock.Call
}

// UploadAvatar is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - body []byte
func (_e *ImageRepo_Expecter) UploadAvatar(ctx interface{}, userID interface{}, body interface{}) *ImageRepo_UploadAvatar_Call {
	return &ImageRepo_UploadAvatar_Call{Call: _e.mock.On("UploadAvatar", ctx, userID, body)}
}

func (_c *ImageRepo_UploadAvatar_Call) Run(run func(ctx context.Context, userID string, body []byte)) *ImageRepo_UploadAvatar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *ImageRepo_UploadAvatar_Call) Return(_a0 string, _a1 error) *ImageRepo_UploadAvatar_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ImageRepo_UploadAvatar_Call) RunAndReturn(run func(context.Context, string, []byte) (string, error)) *ImageRepo_UploadAvatar_Call {
	_c.Call.Return(run)
	return _c
}

// NewImageRepo creates a new instance of ImageRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImageRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImageRepo {
	mock := &ImageRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
