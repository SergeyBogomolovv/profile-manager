// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/SergeyBogomolovv/profile-manager/profile/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProfileRepo is an autogenerated mock type for the ProfileRepo type
type ProfileRepo struct {
	mock.Mock
}

type ProfileRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ProfileRepo) EXPECT() *ProfileRepo_Expecter {
	return &ProfileRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, profile
func (_m *ProfileRepo) Create(ctx context.Context, profile domain.Profile) error {
	ret := _m.Called(ctx, profile)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Profile) error); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProfileRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ProfileRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - profile domain.Profile
func (_e *ProfileRepo_Expecter) Create(ctx interface{}, profile interface{}) *ProfileRepo_Create_Call {
	return &ProfileRepo_Create_Call{Call: _e.mock.On("Create", ctx, profile)}
}

func (_c *ProfileRepo_Create_Call) Run(run func(ctx context.Context, profile domain.Profile)) *ProfileRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Profile))
	})
	return _c
}

func (_c *ProfileRepo_Create_Call) Return(_a0 error) *ProfileRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProfileRepo_Create_Call) RunAndReturn(run func(context.Context, domain.Profile) error) *ProfileRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// ProfileByID provides a mock function with given fields: ctx, id
func (_m *ProfileRepo) ProfileByID(ctx context.Context, id string) (domain.Profile, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ProfileByID")
	}

	var r0 domain.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Profile, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Profile); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Profile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileRepo_ProfileByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProfileByID'
type ProfileRepo_ProfileByID_Call struct {
	*mock.Call
}

// ProfileByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ProfileRepo_Expecter) ProfileByID(ctx interface{}, id interface{}) *ProfileRepo_ProfileByID_Call {
	return &ProfileRepo_ProfileByID_Call{Call: _e.mock.On("ProfileByID", ctx, id)}
}

func (_c *ProfileRepo_ProfileByID_Call) Run(run func(ctx context.Context, id string)) *ProfileRepo_ProfileByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProfileRepo_ProfileByID_Call) Return(_a0 domain.Profile, _a1 error) *ProfileRepo_ProfileByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileRepo_ProfileByID_Call) RunAndReturn(run func(context.Context, string) (domain.Profile, error)) *ProfileRepo_ProfileByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, profile
func (_m *ProfileRepo) Update(ctx context.Context, profile domain.Profile) error {
	ret := _m.Called(ctx, profile)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Profile) error); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProfileRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ProfileRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - profile domain.Profile
func (_e *ProfileRepo_Expecter) Update(ctx interface{}, profile interface{}) *ProfileRepo_Update_Call {
	return &ProfileRepo_Update_Call{Call: _e.mock.On("Update", ctx, profile)}
}

func (_c *ProfileRepo_Update_Call) Run(run func(ctx context.Context, profile domain.Profile)) *ProfileRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Profile))
	})
	return _c
}

func (_c *ProfileRepo_Update_Call) Return(_a0 error) *ProfileRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProfileRepo_Update_Call) RunAndReturn(run func(context.Context, domain.Profile) error) *ProfileRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UsernameExists provides a mock function with given fields: ctx, username
func (_m *ProfileRepo) UsernameExists(ctx context.Context, username string) (bool, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for UsernameExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileRepo_UsernameExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UsernameExists'
type ProfileRepo_UsernameExists_Call struct {
	*mock.Call
}

// UsernameExists is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *ProfileRepo_Expecter) UsernameExists(ctx interface{}, username interface{}) *ProfileRepo_UsernameExists_Call {
	return &ProfileRepo_UsernameExists_Call{Call: _e.mock.On("UsernameExists", ctx, username)}
}

func (_c *ProfileRepo_UsernameExists_Call) Run(run func(ctx context.Context, username string)) *ProfileRepo_UsernameExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProfileRepo_UsernameExists_Call) Return(_a0 bool, _a1 error) *ProfileRepo_UsernameExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProfileRepo_UsernameExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *ProfileRepo_UsernameExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewProfileRepo creates a new instance of ProfileRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileRepo {
	mock := &ProfileRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
