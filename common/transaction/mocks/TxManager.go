// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	transaction "github.com/SergeyBogomolovv/profile-manager/common/transaction"
	mock "github.com/stretchr/testify/mock"
)

// TxManager is an autogenerated mock type for the TxManager type
type TxManager struct {
	mock.Mock
}

type TxManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TxManager) EXPECT() *TxManager_Expecter {
	return &TxManager_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function with given fields: ctx
func (_m *TxManager) BeginTx(ctx context.Context) (context.Context, transaction.Transaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 context.Context
	var r1 transaction.Transaction
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, transaction.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) transaction.Transaction); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TxManager_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type TxManager_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TxManager_Expecter) BeginTx(ctx interface{}) *TxManager_BeginTx_Call {
	return &TxManager_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx)}
}

func (_c *TxManager_BeginTx_Call) Run(run func(ctx context.Context)) *TxManager_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TxManager_BeginTx_Call) Return(_a0 context.Context, _a1 transaction.Transaction, _a2 error) *TxManager_BeginTx_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TxManager_BeginTx_Call) RunAndReturn(run func(context.Context) (context.Context, transaction.Transaction, error)) *TxManager_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx, callback
func (_m *TxManager) Run(ctx context.Context, callback func(context.Context) error) error {
	ret := _m.Called(ctx, callback)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxManager_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type TxManager_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - callback func(context.Context) error
func (_e *TxManager_Expecter) Run(ctx interface{}, callback interface{}) *TxManager_Run_Call {
	return &TxManager_Run_Call{Call: _e.mock.On("Run", ctx, callback)}
}

func (_c *TxManager_Run_Call) Run(run func(ctx context.Context, callback func(context.Context) error)) *TxManager_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *TxManager_Run_Call) Return(err error) *TxManager_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TxManager_Run_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *TxManager_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewTxManager creates a new instance of TxManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTxManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TxManager {
	mock := &TxManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
