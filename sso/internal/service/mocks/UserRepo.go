// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/SergeyBogomolovv/profile-manager/sso/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// AccountByID provides a mock function with given fields: ctx, userID, provider
func (_m *UserRepo) AccountByID(ctx context.Context, userID uuid.UUID, provider domain.AccountType) (domain.Account, error) {
	ret := _m.Called(ctx, userID, provider)

	if len(ret) == 0 {
		panic("no return value specified for AccountByID")
	}

	var r0 domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.AccountType) (domain.Account, error)); ok {
		return rf(ctx, userID, provider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.AccountType) domain.Account); ok {
		r0 = rf(ctx, userID, provider)
	} else {
		r0 = ret.Get(0).(domain.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, domain.AccountType) error); ok {
		r1 = rf(ctx, userID, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_AccountByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountByID'
type UserRepo_AccountByID_Call struct {
	*mock.Call
}

// AccountByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - provider domain.AccountType
func (_e *UserRepo_Expecter) AccountByID(ctx interface{}, userID interface{}, provider interface{}) *UserRepo_AccountByID_Call {
	return &UserRepo_AccountByID_Call{Call: _e.mock.On("AccountByID", ctx, userID, provider)}
}

func (_c *UserRepo_AccountByID_Call) Run(run func(ctx context.Context, userID uuid.UUID, provider domain.AccountType)) *UserRepo_AccountByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(domain.AccountType))
	})
	return _c
}

func (_c *UserRepo_AccountByID_Call) Return(_a0 domain.Account, _a1 error) *UserRepo_AccountByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_AccountByID_Call) RunAndReturn(run func(context.Context, uuid.UUID, domain.AccountType) (domain.Account, error)) *UserRepo_AccountByID_Call {
	_c.Call.Return(run)
	return _c
}

// AddAccount provides a mock function with given fields: ctx, userID, provider, password
func (_m *UserRepo) AddAccount(ctx context.Context, userID uuid.UUID, provider domain.AccountType, password []byte) (domain.Account, error) {
	ret := _m.Called(ctx, userID, provider, password)

	if len(ret) == 0 {
		panic("no return value specified for AddAccount")
	}

	var r0 domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.AccountType, []byte) (domain.Account, error)); ok {
		return rf(ctx, userID, provider, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, domain.AccountType, []byte) domain.Account); ok {
		r0 = rf(ctx, userID, provider, password)
	} else {
		r0 = ret.Get(0).(domain.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, domain.AccountType, []byte) error); ok {
		r1 = rf(ctx, userID, provider, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_AddAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAccount'
type UserRepo_AddAccount_Call struct {
	*mock.Call
}

// AddAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - provider domain.AccountType
//   - password []byte
func (_e *UserRepo_Expecter) AddAccount(ctx interface{}, userID interface{}, provider interface{}, password interface{}) *UserRepo_AddAccount_Call {
	return &UserRepo_AddAccount_Call{Call: _e.mock.On("AddAccount", ctx, userID, provider, password)}
}

func (_c *UserRepo_AddAccount_Call) Run(run func(ctx context.Context, userID uuid.UUID, provider domain.AccountType, password []byte)) *UserRepo_AddAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(domain.AccountType), args[3].([]byte))
	})
	return _c
}

func (_c *UserRepo_AddAccount_Call) Return(_a0 domain.Account, _a1 error) *UserRepo_AddAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_AddAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID, domain.AccountType, []byte) (domain.Account, error)) *UserRepo_AddAccount_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, email
func (_m *UserRepo) Create(ctx context.Context, email string) (domain.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepo_Expecter) Create(ctx interface{}, email interface{}) *UserRepo_Create_Call {
	return &UserRepo_Create_Call{Call: _e.mock.On("Create", ctx, email)}
}

func (_c *UserRepo_Create_Call) Run(run func(ctx context.Context, email string)) *UserRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_Create_Call) Return(_a0 domain.User, _a1 error) *UserRepo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_Create_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *UserRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepo) GetByEmail(ctx context.Context, email string) (domain.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type UserRepo_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepo_Expecter) GetByEmail(ctx interface{}, email interface{}) *UserRepo_GetByEmail_Call {
	return &UserRepo_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *UserRepo_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *UserRepo_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_GetByEmail_Call) Return(_a0 domain.User, _a1 error) *UserRepo_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *UserRepo_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
